{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utente\\\\Desktop\\\\EserciziProgrammazione\\\\React\\\\unicafe\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Give your feedback!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Good! :)\",\n        handler: () => Increment(good, setGood)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Neutral :|\",\n        handler: () => Increment(neutral, setNeutral)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Bad! :(\",\n        handler: () => Increment(bad, setBad)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nconst Increment = (value, setValue) => {\n  return setValue(value + 1);\n};\n\n_c2 = Increment;\n\nconst Button = ({\n  text,\n  handler\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handler,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_c3 = Button;\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"center\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }, this), \"No feedback given. Click on any button to give feedback!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  } else {\n    let total = good + neutral + bad;\n    let positiveFeedback = parseInt(good / total * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Statistics:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SingleStatistic, {\n        text: \"Good\",\n        stat: good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SingleStatistic, {\n        text: \"Neutral\",\n        stat: neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SingleStatistic, {\n        text: \"Bad\",\n        stat: bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SingleStatistic, {\n        text: \"All\",\n        stat: total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Average, {\n        good: good,\n        bad: bad,\n        total: total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), \"Positive feedback: \", positiveFeedback, \"% \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c4 = Statistics;\n\nlet SingleStatistic = ({\n  text,\n  stat\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [text, \": \", stat]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 62,\n  columnNumber: 42\n}, this);\n\n_c5 = SingleStatistic;\n\nlet Average = ({\n  good,\n  bad,\n  total\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [\"Average: \", (good - bad) / total]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 42\n}, this);\n\n_c6 = Average;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Increment\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"Statistics\");\n$RefreshReg$(_c5, \"SingleStatistic\");\n$RefreshReg$(_c6, \"Average\");","map":{"version":3,"sources":["C:/Users/Utente/Desktop/EserciziProgrammazione/React/unicafe/src/App.js"],"names":["React","useState","App","good","setGood","neutral","setNeutral","bad","setBad","Increment","value","setValue","Button","text","handler","Statistics","total","positiveFeedback","parseInt","SingleStatistic","stat","Average"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <div>\n    <center>\n      <h1>Give your feedback!</h1>\n      <Button text=\"Good! :)\" handler={()=>Increment(good, setGood)}/>\n      <Button text=\"Neutral :|\" handler={()=>Increment(neutral, setNeutral)}/>\n      <Button text=\"Bad! :(\" handler={()=>Increment(bad, setBad)}/>\n      <Statistics good={good} neutral={neutral} bad={bad}/>\n      </center>\n    </div>\n  )\n}\n\nconst Increment = (value, setValue) =>{\n  return(\n    setValue(value +1)\n  );\n}\n\nconst Button = ({text, handler}) => {\n  return(\n  <>\n    <button onClick={(handler)}>{text}</button>\n  </>);\n}\n\nconst Statistics = ({good, neutral, bad})=>{\n\n  if((good===0 && neutral===0) && bad===0){\n    return (<div>\n      <center>\n      <br></br>\n        No feedback given. Click on any button to give feedback!\n      </center>\n    </div>);\n  } else{\n\n    let total = good + neutral + bad;\n    let positiveFeedback = parseInt((good / total) * 100);\n\n    return (\n      <div>\n        <h1>Statistics:</h1>\n        <SingleStatistic text=\"Good\" stat={good}/>\n        <SingleStatistic text=\"Neutral\" stat={neutral}/>\n        <SingleStatistic text=\"Bad\" stat={bad}/>\n        <SingleStatistic text=\"All\" stat={total}/>\n        <Average good={good} bad={bad} total={total}/>\n    Positive feedback: { positiveFeedback}% <br></br>\n      </div>\n    )\n  }\n}\n\nlet SingleStatistic = ({text, stat}) => (<div>{text}: {stat}</div>)\n\nlet Average = ({ good, bad, total }) => (<div>Average: {(good - bad) / total}</div>)\n\nexport default App"]},"metadata":{},"sourceType":"module"}