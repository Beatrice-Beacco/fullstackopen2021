{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utente\\\\Desktop\\\\EserciziProgrammazione\\\\React\\\\anecdotes\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //Define Anecdotes\n  const [selected, setSelected] = useState(0);\n  const anecdotes = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.', 'Just adding this to see if it works dynamically']; // Define Votes\n\n  let allVotes = new Array(anecdotes.length).fill(0); //creates an array with the same length as the anecdotes array and fills it with 0s\n\n  const [votes, setVotes] = useState(allVotes); //Renders the component and sets the functions as event handlers for the buttons\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Anecdote of the day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), anecdotes[selected], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => RandomSelect(setSelected, anecdotes.length),\n      children: \"New Anecdote!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => Voting(votes, setVotes, selected),\n      children: \"Vote!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 79\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), \"This anecdote has \", votes[selected], \" votes.\", /*#__PURE__*/_jsxDEV(MostVoted, {\n      arrayVotes: votes,\n      arrayStrings: anecdotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}; //Creates a random number in range 0 to (anecdotes.length-1) and sets it as the selected state\n\n\n_s(App, \"2wz3pEpaMJhOczpUBXoZcZ9TCN0=\");\n\n_c = App;\n\nconst RandomSelect = (setValue, max) => {\n  let random = parseInt(Math.random() * max);\n  return setValue(random);\n}; //Copies the array, increments by 1 the element in the same index as the state, and sets the state of vote\n\n\n_c2 = RandomSelect;\n\nconst Voting = (value, setValue, index) => {\n  let copy = { ...value\n  };\n  copy[index] += 1;\n  return setValue(copy);\n}; //Renders the anecdote and the vote at index of the highest rated item\n\n\n_c3 = Voting;\n\nconst MostVoted = ({\n  arrayVotes,\n  arrayStrings\n}) => {\n  let index = findMax(arrayVotes, arrayStrings.length); //the index is the return value of the custom function findMax, which returns the index of the highest value item\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Most voted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), arrayStrings[index], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 31\n    }, this), \"Has \", arrayVotes[index], \" votes.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n}; //Returns the index of the highest value\n\n\n_c4 = MostVoted;\n\nfunction findMax(array, arrayLength) {\n  let max = 0;\n  let indexMax = 0;\n\n  for (let i = 0; i < arrayLength; i++) {\n    if (array[i] > max) {\n      max = array[i];\n      indexMax = i;\n    }\n  }\n\n  return indexMax;\n}\n\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"RandomSelect\");\n$RefreshReg$(_c3, \"Voting\");\n$RefreshReg$(_c4, \"MostVoted\");","map":{"version":3,"sources":["C:/Users/Utente/Desktop/EserciziProgrammazione/React/anecdotes/src/App.js"],"names":["React","useState","App","selected","setSelected","anecdotes","allVotes","Array","length","fill","votes","setVotes","RandomSelect","Voting","setValue","max","random","parseInt","Math","value","index","copy","MostVoted","arrayVotes","arrayStrings","findMax","array","arrayLength","indexMax","i"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst App = () => {\n\n//Define Anecdotes\n  const [selected, setSelected] = useState(0)\n\n  const anecdotes = [\n    'If it hurts, do it more often',\n    'Adding manpower to a late software project makes it later!',\n    'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n    'Premature optimization is the root of all evil.',\n    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.',\n    'Just adding this to see if it works dynamically'\n  ]\n\n// Define Votes\n  let allVotes = new Array(anecdotes.length).fill(0); //creates an array with the same length as the anecdotes array and fills it with 0s\n\n  const [votes, setVotes] = useState(allVotes)\n\n//Renders the component and sets the functions as event handlers for the buttons\n  return (\n    <div>\n      <h1>Anecdote of the day</h1>\n      {anecdotes[selected]}\n      <br /><br />\n      <button onClick={() => RandomSelect(setSelected, anecdotes.length)}>New Anecdote!</button> \n      <button onClick={() => Voting(votes, setVotes, selected)}>Vote!</button><br/>\n      <br />\n      This anecdote has {votes[selected]} votes.\n      <MostVoted arrayVotes={votes} arrayStrings={anecdotes} />\n    </div>\n  )\n}\n\n//Creates a random number in range 0 to (anecdotes.length-1) and sets it as the selected state\nconst RandomSelect = (setValue, max) =>{\n  let random = parseInt(Math.random()*max);\n  return(\n    setValue(random)\n  );\n}\n\n//Copies the array, increments by 1 the element in the same index as the state, and sets the state of vote\nconst Voting = (value, setValue, index)=>{\n  let copy = {...value};\n  copy[index] += 1;\n  return(\n    setValue(copy)\n  );\n}\n\n//Renders the anecdote and the vote at index of the highest rated item\nconst MostVoted = ({arrayVotes, arrayStrings}) =>{\n\n  let index = findMax(arrayVotes, arrayStrings.length); //the index is the return value of the custom function findMax, which returns the index of the highest value item\n\n  return(<div>\n    <br /><br />\n    <h1>Most voted</h1>\n    {arrayStrings[index]}<br/><br/>\n    Has {arrayVotes[index]} votes.\n  </div>\n  );\n}\n\n//Returns the index of the highest value\nfunction findMax(array, arrayLength) {\n  let max = 0;\n  let indexMax = 0;\n\n  for (let i = 0; i < arrayLength; i++) { \n    if (array[i] > max) {\n      max = array[i]\n      indexMax = i;\n    }\n  }\n  return indexMax\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}