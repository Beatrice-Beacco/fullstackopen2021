[{"C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\index.js":"1","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\App.js":"2","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\Numbers.js":"3","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\FoundResults.js":"4","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\Field.js":"5","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\services\\numbers.js":"6","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\Message.js":"7"},{"size":121,"mtime":1620154942418,"results":"8","hashOfConfig":"9"},{"size":5783,"mtime":1629902308797,"results":"10","hashOfConfig":"9"},{"size":501,"mtime":1629902162375,"results":"11","hashOfConfig":"9"},{"size":343,"mtime":1620212843674,"results":"12","hashOfConfig":"9"},{"size":397,"mtime":1620213162638,"results":"13","hashOfConfig":"9"},{"size":756,"mtime":1629901134779,"results":"14","hashOfConfig":"9"},{"size":655,"mtime":1629902059092,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1893pdu",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\index.js",[],["33","34"],"C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\App.js",["35"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\n//Import my module\r\nimport numberService from './services/numbers.js'\r\n\r\n//Import my components\r\nimport Numbers from './components/Numbers'\r\nimport FoundResults from './components/FoundResults'\r\nimport Field from './components/Field'\r\nimport Message from './components/Message'\r\n\r\nconst App = () => {\r\n\r\n//States\r\nconst [persons, setPersons] = useState([]) //list of total entries\r\nconst [newName, setNewName] = useState('') //name input field\r\nconst [newNumber, setNewNumber] = useState('') //number input field\r\nconst [searchResults, setSearchResults] = useState([]) //search input field\r\nconst [notification, setNotification] = useState('') //notification to display if something is added/there's an error\r\n\r\n//Fetches the data from db.json as sets it as the persons state\r\nconst hook = () => {\r\n  numberService.getAll().then((initialDb) => setPersons(initialDb))\r\n}\r\n\r\nuseEffect(hook,[])\r\n\r\n//Receives the event to use preventDefault, the function to change the desired state\r\n//and the ID of the field to get the user imput\r\n//Returns the action of setting the content of the user input to the respective state\r\n//of the state handler function\r\nconst addNew = (event, handleState, id) => {\r\n  event.preventDefault()\r\n  let content = document.getElementById(id).value\r\n  return handleState(content)\r\n}\r\n\r\n//Receives the event object (to prevent the reload of the page) and the id of the entry to delete\r\n//Makes a request to delete the entry, then makes a request to receive the updated list from the database\r\n//And sets it as the persons state\r\nconst deleteEntry = (event, id, name) =>{\r\n  event.preventDefault()\r\n  numberService.deleteNumber(id)\r\n  .then(()=>{\r\n    numberService.getAll()\r\n    .then((list)=> setPersons(list))\r\n  })\r\n  .catch(()=>updateMessage([name + ' was already deleted from the server', 'red'])) //If there's an error that means that the number is not present and updates the notification accordingly\r\n}\r\n\r\n//Takes the message array as an argument\r\n//Sets the notification state with the passed argument\r\n//Returns a timeout that sets the notification with an empty message after 5 seconds\r\nconst updateMessage = (message) => {\r\n  setNotification(message)\r\n  return (setTimeout(() => {\r\n    setNotification('')\r\n  }, 5000))\r\n}\r\n\r\n\r\n\r\n//Searches the array with find to see if the user input set in newName aldready exists\r\n//in the array\r\n//If a result is returned, returns a popup to alert the user\r\n//If undefined is returned: \r\n//If both user inputs are set, both are added to the json database through the HTTP POST method\r\n//method and set to the state through the state handler function\r\n//If one or both inputs are not set, returns a popup to alert the user and updates the number in the database\r\nconst updateList = (event) => {\r\n  event.preventDefault();\r\n\r\n  const personSearch = persons.find((element) => (element['name'] === newName))\r\n\r\n    if(newName && newNumber){ //If both parameters are set\r\n      if (personSearch) { //And if the name is already present, opens a prompt to confirm user input, then sends a put request to the server\r\n        const userInput = window.confirm('The name ' + newName + ' is already present! Do you want to replace the number?')\r\n        if (userInput){\r\n          const updatedEntry = {...personSearch, number: newNumber}\r\n          numberService.update(personSearch.id, updatedEntry)\r\n          .then(() => numberService.getAll()) //Fetches the updated data\r\n          .then((updatedList) => setPersons(updatedList)) //And updates the persons state\r\n          .then(updateMessage(['Updated ' + newName, 'green'])) ////calls the function updateMessage and passes the update notification\r\n        }\r\n      } else {\r\n      const newId = persons.reduce((biggest, element)=>{ //Calculates the largest id so we can set the biggest number +1 to avoid duplicates\r\n        return(Math.max(biggest, element.id))}, 0)\r\n      const newEntry = { 'name': newName, 'number': newNumber, 'id': newId+1}\r\n      numberService.create(newEntry) //creates the new entry\r\n      .then(addedNumber => setPersons([...persons, addedNumber])) //and updates the state with the database\r\n      .then(updateMessage(['Added '+ newName, 'green'])) //calls the function updateMessage and passes the add notification\r\n      }\r\n    } else { //If both fields arenot set alerts the user\r\n      return (window.alert('Please, complete both fields!'))\r\n    }\r\n}\r\n\r\n//Gets the user imput from the search field, and filters the persons array. If at least\r\n//a match is found in each element through the search method, returns true.\r\n//At the end sets the searchResults state with the filtered array.\r\nconst searchList = () => {\r\n  let searched = document.getElementById(\"search\").value\r\n  let results = persons.filter((element)=>{\r\n   return (element['name'].search(searched) > -1) ? true : false //(i know this notation is useless but I wanted to use it atleast once in my life lmao)\r\n  })\r\n  return setSearchResults(results)\r\n}\r\n\r\n//Renders all components and fields\r\n  return (\r\n    <div>\r\n      <center><h1>Phonebook</h1></center>\r\n      <Message state={notification}/>\r\n      <h2>Search</h2>\r\n      <input id=\"search\" onChange={searchList}/><br/>\r\n      Results: {<FoundResults results={searchResults}/>}\r\n      <h2>Add New</h2>\r\n      <form onSubmit={updateList}>\r\n        <Field text=\"Name\" id=\"name\" updateFunction={addNew} stateHandler={setNewName}/>\r\n        <Field text=\"Number\" id=\"number\" updateFunction={addNew} stateHandler={setNewNumber}/>\r\n        <div>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n      </form>\r\n      <h2>Numbers</h2>\r\n      <Numbers list={persons} handler={deleteEntry}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\Numbers.js",[],"C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\FoundResults.js",[],"C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\Field.js",[],"C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\services\\numbers.js",["36"],"import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(baseUrl + '/' + id, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Deletes the number and returns the updated database\r\nconst deleteNumber = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    const updates = request.then(getAll)\r\n    return updates\r\n}\r\n\r\nexport default {getAll, create, update, deleteNumber}\r\n","C:\\Users\\Utente\\Desktop\\EserciziProgrammazione\\React\\part2\\02phonebook\\src\\components\\Message.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":26,"column":1,"nodeType":"47","endLine":26,"endColumn":54},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]